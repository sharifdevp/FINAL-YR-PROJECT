generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  image           String?
  role            Role         @default(USER)
  phone           String?
  title           OrgnTitle?   @relation(fields: [titleId], references: [id], onDelete: Cascade)
  titleId         String?
  titleName       String?
  manager         String?
  departmentName  String?
  departmentId    String?
  department      Department?  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  accounts        Account[]
  sessions        Session[]
  balances        Balances[]
  leaves          Leave[]
  onLeave         Boolean      @default(false)
  birthName       String?
  createdAt       DateTime     @default(now())
}

model LeaveType {
  id          String   @id @default(cuid())
  title       String
  values      String   @default("[\"Credit\", \"Used\", \"Available\"]")
  category    String   // Should be a lower case of the title
  description String?
  leaves      Leave[]  @relation("LeaveTypeToLeave")
}

enum LeaveStatus {
  PENDING
  APPROVED
  INMODERATION
  REJECTED
}

model Leave {
  id            String      @id @default(cuid())
  type          String
  year          String      @default("")
  startDate     DateTime
  endDate       DateTime
  days          Int
  userName      String 
  phoneNumber   String?
  userNote      String?
  tasksLink     String?
  userEmail     String
  status        LeaveStatus @default(PENDING)
  moderator     String?
  moderatorNote String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  fileContent   Bytes?
  userId        String
  leaveTypeId   String?
  requestedOn   DateTime    @default(now())
  approvedBy    String?
  department   String?
  user          User        @relation(fields: [userId], references: [id])
  leaveType     LeaveType?  @relation(fields: [leaveTypeId], references: [id], name: "LeaveTypeToLeave")
}

model Balances {
  id                 String @id @default(cuid())
  year               String
  annualCredit       Int?   @default(0)
  annualUsed         Int?   @default(0)
  annualAvailable    Int?   @default(0)
  sickCredit         Int?   @default(0)
  sickUsed           Int?   @default(0)
  sickAvailable      Int?   @default(0)
  maternityCredit    Int?   @default(0)
  maternityUsed      Int?   @default(0)
  maternityAvailable Int?   @default(0)
  paternityCredit    Int?   @default(0)
  paternityUsed      Int?   @default(0)
  paternityAvailable Int?   @default(0)
  emergencyCredit    Int?   @default(0)
  emergencyUsed      Int?   @default(0)
  emergencyAvailable Int?   @default(0)
  compensationCredit Int?   @default(0)
  compensationUsed   Int?   @default(0)
  compensationAvailable Int? @default(0)
  unpaidCredit          Int?   @default(0)
  unpaidUsed            Int?   @default(0)
  unpaidAvailable       Int?   @default(0)
  name               String
  email              String
  user               User   @relation(fields: [email], references: [email], onDelete: Cascade)
}

model Events {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
}

model Department {
  id          String   @id @default(cuid())
  label       String
  desc        String
  userId      User[]
}

model OrgnTitle {
  id          String    @id @default(cuid())
  titlename   String
  description String
  user        User[]
}






